version: '3.4'
services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:${ELASTIC_VERSION:-6.1.3}
    volumes:
      - es_data:/usr/share/elasticsearch/data
    deploy:
      placement:
        constraints:
          - node.labels.storage == 1
      resources:
        limits:
          memory: 1g
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx756m"
  logstash:
    image: docker.elastic.co/logstash/logstash-oss:${ELASTIC_VERSION:-6.1.3}
    configs:
      - source: logstash_3
        target: /usr/share/logstash/pipeline/main.conf
  kibana:
    image: docker.elastic.co/kibana/kibana-oss:${ELASTIC_VERSION:-6.1.3}
  kibana_auth:
    image: a5huynh/oauth2_proxy
    env_file:
      - kibana_auth.env
    command: >
      --upstream="http://kibana:5601"
      --http-address="0.0.0.0:4180"
      --redirect-url="https://kibana.itzg.me/oauth2/callback"
      --email-domain=*
      -provider=github
      -github-org=itzgAndEnenbee

  influxdb:
    image: influxdb:1.4.2
    ports:
      - 8086:8086
    environment:
      INFLUXDB_DB: metrics
    volumes:
      - influxdb_data:/var/lib/influxdb
    deploy:
      placement:
        constraints:
          - node.labels.storage == 1
      resources:
        limits:
          memory: 756m
  influxdb_tls_auth:
    image: squareup/ghostunnel
    command: >
      server
      --listen 0.0.0.0:5086
      --unsafe-target
      --target influxdb:8086
      --keystore /certs/logstash-server-bundle.pem
      --cacert /certs/ca.pem
      --allow-all
    secrets:
      # Can't use default /var/run/secrets since ghostunnel image is based on alpine
      - source: logstash-ca.pem
        target: /certs/ca.pem
      - source: logstash-server-bundle.pem
        target: /certs/logstash-server-bundle.pem
    ports:
      - 5086:5086
  chronograf:
    # NOTE: internally binds to 8888
    image: chronograf:1.3.10
    command: --influxdb-url=http://influxdb:8086
    env_file:
      - chronograf.env
    volumes:
      - chronograf_data:/var/lib/chronograf
    deploy:
      placement:
        constraints:
          - node.labels.storage == 1
      resources:
        limits:
          memory: 128m
  haproxy:
    image: itzg/haproxy-lets
    env_file:
      - haproxy.env
    volumes:
      - haproxy_certs:/certs
      - haproxy_config:/config
    ports:
      - 80:80
      - 443:443
    deploy:
      placement:
        constraints:
          - node.labels.storage == 1
      resources:
        limits:
          memory: 128m

  zk-1: &zk
    image: confluentinc/cp-zookeeper:4.0.0
    env_file:
      - zk-common.env
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: 0.0.0.0:2888:3888;zk-2:2888:3888;zk-3:2888:3888
    volumes:
      - zk-1:/var/lib/zookeeper/data
  zk-2:
    <<: *zk
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_SERVERS: zk-1:2888:3888;0.0.0.0:2888:3888;zk-3:2888:3888
    volumes:
      - zk-2:/var/lib/zookeeper/data
  zk-3:
    <<: *zk
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_SERVERS: zk-1:2888:3888;zk-2:2888:3888;0.0.0.0:2888:3888
    volumes:
      - zk-3:/var/lib/zookeeper/data

  kafka-1: &kafka
    image: confluentinc/cp-kafka:4.0.0
    env_file:
      - kafka-common.env
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:9192,SSL://kafka.itzg.me:5092
    ports:
      - 5092:9092
    volumes:
      - kafka-1:/var/lib/kafka/data
    secrets:
      - source: ca-trust-store.jks
        target: /etc/kafka/secrets/ca-trust-store.jks
      - source: ca-trust-store.cred
        target: /etc/kafka/secrets/ca-trust-store.cred
      - source: kafka-server-keystore.p12
        target: /etc/kafka/secrets/kafka-server-keystore.p12
      - source: kafka-server-keystore.cred
        target: /etc/kafka/secrets/kafka-server-keystore.cred
  kafka-2:
    <<: *kafka
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:9192,SSL://kafka.itzg.me:5093
    ports:
      - 5093:9092
    volumes:
      - kafka-2:/var/lib/kafka/data
  kafka-3:
    <<: *kafka
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:9192,SSL://kafka.itzg.me:5094
    ports:
      - 5094:9092
    volumes:
      - kafka-3:/var/lib/kafka/data

  kafka_manager_auth:
    image: a5huynh/oauth2_proxy
    env_file:
      - kafka_manager_auth.env
    command: >
      --upstream="http://kafka_manager:9000"
      --http-address="0.0.0.0:4180"
      --redirect-url="https://kafka-manager.itzg.me/oauth2/callback"
      --email-domain=*
      -provider=github
      -github-org=itzgAndEnenbee

  kafka_manager:
    image: sheepkiller/kafka-manager
    environment:
      ZK_HOSTS: zk-1:2181,zk-2:2181,zk-3:2181
      JMX_PORT: 9181
      APPLICATION_SECRET: letmein

# Volumes for persisting data, see https://docs.docker.com/engine/admin/volumes/volumes/
volumes:
  es_data:
  haproxy_certs:
  haproxy_config:
  influxdb_data:
  chronograf_data:
  zk-1:
  zk-2:
  zk-3:
  kafka-1:
  kafka-2:
  kafka-3:

configs:
  logstash_3:
    file: ./logstash.conf

secrets:
  logstash-ca.pem:
    file: certs/logstash-ca.pem
  logstash-server-bundle.pem:
    file: certs/logstash-server-bundle.pem
  ca-trust-store.jks:
    file: certs/ca-trust-store.jks
  kafka-server-keystore.p12:
    file: certs/kafka-server-keystore.p12
  ca-trust-store.cred:
    external: true
  kafka-server-keystore.cred:
    external: true
